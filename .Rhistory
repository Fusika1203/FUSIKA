pdf(paste0("Violinplot_GSE49515_", i, ".pdf", sep = ""),
width = 6, # The width of the plot in inches
height = 6) # The height of the plot in inches
print(p)
dev.off()
subset_dataGSE58208 = read.delim("GSE58208_candidate.txt", header=T)
setwd("D:/Research/HCC/Data/Y6_HCC/GSE58208")
subset_dataGSE58208 = read.delim("GSE58208_candidate.txt", header=T)
subset_dataGSE58208$Type = as.factor(subset_dataGSE58208$Type)
library(ggpubr)
library(zoo)
library(ggplot2)
i= "RRM2_1"
vio <- as.data.frame(subset_dataGSE58208[,names(subset_dataGSE58208) %in% c("Type", i)])
colnames(vio) = c("Gene_expression", "Type")
p <- ggplot(vio, aes(x = Type, y = Gene_expression)) +
geom_violin(aes(fill = Type), trim = FALSE) +
geom_boxplot(position = position_dodge(0.3), width = 0.1, color = "black", outlier.size = 1) +
stat_compare_means(method = "wilcox.test", label.x = 0.75, label.y = 2) +
theme_classic() + labs(y = "Z-score expression level" , x = "Tissue type") + labs(fill = "Tissue type")
pdf(paste0("Violinplot_GSE58208-sub_", i, ".pdf", sep = ""),
width = 6, # The width of the plot in inches
height = 6) # The height of the plot in inches
i= "RRM2_1"
vio <- as.data.frame(subset_dataGSE58208[,names(subset_dataGSE58208) %in% c("Type", i)])
colnames(vio) = c("Gene_expression", "Type")
p <- ggplot(vio, aes(x = Type, y = Gene_expression)) +
geom_violin(aes(fill = Type), trim = FALSE) +
geom_boxplot(position = position_dodge(0.3), width = 0.1, color = "black", outlier.size = 1) +
stat_compare_means(method = "wilcox.test", label.x = 0.75, label.y = 2) +
theme_classic() + labs(y = "Z-score expression level" , x = "Tissue type") + labs(fill = "Tissue type")
pdf(paste0("Violinplot_GSE58208_", i, ".pdf", sep = ""),
width = 6, # The width of the plot in inches
height = 6) # The height of the plot in inches
print(p)
dev.off()
i= "DTL"
vio <- as.data.frame(subset_dataGSE58208[,names(subset_dataGSE58208) %in% c("Type", i)])
colnames(vio) = c("Gene_expression", "Type")
p <- ggplot(vio, aes(x = Type, y = Gene_expression)) +
geom_violin(aes(fill = Type), trim = FALSE) +
geom_boxplot(position = position_dodge(0.3), width = 0.1, color = "black", outlier.size = 1) +
stat_compare_means(method = "wilcox.test", label.x = 0.75, label.y = 1) +
theme_classic() + labs(y = "Z-score expression level" , x = "Tissue type") + labs(fill = "Tissue type")
pdf(paste0("Violinplot_GSE58208_", i, ".pdf", sep = ""),
width = 6, # The width of the plot in inches
height = 6) # The height of the plot in inches
print(p)
dev.off()
gene_info <- data.frame(
Probe = c("201291_s_at", "201292_at", "211470_s_at", "206239_s_at", "201890_at",
"209773_s_at", "218009_s_at", "209220_at", "218585_s_at", "212554_at",
"219918_s_at", "206561_s_at", "202422_s_at"),
Gene = c("TOP2A_1", "TOP2A_2", "SULT1C2", "SPINK1", "RRM2_1",
"RRM2_2", "PRC1", "GPC3", "DTL", "CAP2",
"ASPM", "AKR1B10", "ACSL4"),
stringsAsFactors = FALSE
)
setwd("D:/Research/HCC/Data/Y6_HCC/GSE14520")
setwd("D:/Research/HCC/Data/Y6_HCC/GSE58208")
subset_dataGSE58208 = read.delim("GSE58208_candidate.txt", header=T)
subset_dataGSE58208$Type = as.factor(subset_dataGSE58208$Type)
library(ggpubr)
library(zoo)
library(ggplot2)
library(cutpointr)
# Khởi tạo dataframe để lưu kết quả
results <- data.frame(
Gene = character(),
AUC = numeric(),
Cutoff = numeric(),
Direction = character(),
stringsAsFactors = FALSE
)
# Lặp qua từng cột gene (trừ cột "type")
genes <- c("TOP2A_1", "TOP2A_2", "SULT1C2", "SPINK1", "RRM2_1",
"RRM2_2", "PRC1", "GPC3", "DTL", "CAP2",
"ASPM", "AKR1B10", "ACSL4")
for (gene in genes) {
cp <- suppressMessages(
cutpointr(
x = subset_dataGSE58208[[gene]],
class = subset_dataGSE58208$Type,
method = maximize_metric,
metric = youden,
pos_class = "1",
direction= ">="
)
)
# Lưu kết quả vào dataframe
results <- rbind(
results,
data.frame(
Gene = gene,
AUC = cp$AUC,
Cutoff = cp$optimal_cutpoint,
Direction = cp$direction
)
)
}
# Xem kết quả
print(results)
View(subset_dataGSE49515)
library(cutpointr)
# Khởi tạo dataframe để lưu kết quả
results <- data.frame(
Gene = character(),
AUC = numeric(),
Cutoff = numeric(),
Direction = character(),
stringsAsFactors = FALSE
)
# Lặp qua từng cột gene (trừ cột "type")
genes <- c("TOP2A_1", "TOP2A_2", "SULT1C2", "SPINK1", "RRM2_1",
"RRM2_2", "PRC1", "GPC3", "DTL", "CAP2",
"ASPM", "AKR1B10", "ACSL4")
for (gene in genes) {
cp <- suppressMessages(
cutpointr(
x = subset_dataGSE49515[[gene]],
class = subset_dataGSE49515$Type,
method = maximize_metric,
metric = youden,
pos_class = "1",
direction= ">="
)
)
# Lưu kết quả vào dataframe
results <- rbind(
results,
data.frame(
Gene = gene,
AUC = cp$AUC,
Cutoff = cp$optimal_cutpoint,
Direction = cp$direction
)
)
}
# Xem kết quả
print(results)
setwd("D:/Research/HCC/Data/Y6_HCC/GSE14520")
GSE14520 = read.delim("GSE14520_normalize.txt", header=T)
GSE14520_pheno = read.table("Cli_GSE14520.txt", header=T)
View(GSE14520_pheno)
GSE14520_subset <- GSE14520[rownames(GSE14520) %in% gene_info$Probe, ]
View(gene_info)
View(GSE14520_pheno)
View(GSE14520)
# Giả sử GSE14520 là một data frame hoặc matrix, và gene_info đã được tạo như trên
GSE14520 = read.table("GSE14520_normalize.txt", header=T)
GSE14520_pheno = read.table("Cli_GSE14520.txt", header=T)
# Subset GSE14520 theo rownames (probe IDs)
GSE14520_subset <- GSE14520[rownames(GSE14520) %in% gene_info$Probe, ]
View(GSE14520_subset)
# 1. Đảo chiều (transpose) dữ liệu
GSE14520_transposed <- as.data.frame(t(GSE14520_subset))
# 2. Đổi tên cột từ probe thành gene (dựa trên gene_info)
# Đảm bảo các cột hiện tại (tức là probe) có mặt trong gene_info$Probe
matched_genes <- gene_info$Gene[match(colnames(GSE14520_transposed), gene_info$Probe)]
colnames(GSE14520_transposed) <- matched_genes
merged_GSE14520 <- merge(GSE14520_transposed, GSE14520_pheno, by.x = "row.names", by.y = "ID")
View(merged_GSE14520)
merged_GSE14520$Type <- as.factor(merged_GSE14520$Type)
table(merged_GSE14520$Disease_state)
table(merged_GSE14520$Type)
setwd("D:/Research/HCC/Data/Y6_HCC/GSE14520")
for (i in c("TOP2A_1", "TOP2A_2", "SULT1C2", "SPINK1", "RRM2_1",
"RRM2_2", "PRC1", "GPC3", "DTL", "CAP2",
"ASPM", "AKR1B10", "ACSL4")) {
print(i)
vio <- as.data.frame(merged_GSE14520[,names(merged_GSE14520) %in% c("Type", i)])
colnames(vio) = c("Gene_expression", "Type")
p <- ggplot(vio, aes(x = Type, y = Gene_expression)) +
geom_violin(aes(fill = Type), trim = FALSE) +
geom_boxplot(position = position_dodge(0.3), width = 0.1, color = "black", outlier.size = 1) +
stat_compare_means(method = "wilcox.test", label.x = 0.75, label.y = 1) +
theme_classic() + labs(y = "Z-score expression level" , x = "Tissue type") + labs(fill = "Tissue type")
pdf(paste0("Violinplot_GSE14520_", i, ".pdf", sep = ""),
width = 6, # The width of the plot in inches
height = 6) # The height of the plot in inches
print(p)
dev.off()
}
i= "DTL"
vio <- as.data.frame(merged_GSE14520[,names(merged_GSE14520) %in% c("Type", i)])
colnames(vio) = c("Gene_expression", "Type")
p <- ggplot(vio, aes(x = Type, y = Gene_expression)) +
geom_violin(aes(fill = Type), trim = FALSE) +
geom_boxplot(position = position_dodge(0.3), width = 0.1, color = "black", outlier.size = 1) +
stat_compare_means(method = "wilcox.test", label.x = 0.75, label.y = 3) +
theme_classic() + labs(y = "Z-score expression level" , x = "Tissue type") + labs(fill = "Tissue type")
pdf(paste0("Violinplot_GSE14520_", i, ".pdf", sep = ""),
width = 6, # The width of the plot in inches
height = 6) # The height of the plot in inches
print(p)
dev.off()
}
i= "RRM2_1"
vio <- as.data.frame(merged_GSE14520[,names(merged_GSE14520) %in% c("Type", i)])
colnames(vio) = c("Gene_expression", "Type")
p <- ggplot(vio, aes(x = Type, y = Gene_expression)) +
geom_violin(aes(fill = Type), trim = FALSE) +
geom_boxplot(position = position_dodge(0.3), width = 0.1, color = "black", outlier.size = 1) +
stat_compare_means(method = "wilcox.test", label.x = 0.75, label.y = 3) +
theme_classic() + labs(y = "Z-score expression level" , x = "Tissue type") + labs(fill = "Tissue type")
pdf(paste0("Violinplot_GSE14520_", i, ".pdf", sep = ""),
width = 6, # The width of the plot in inches
height = 6) # The height of the plot in inches
print(p)
dev.off()
setwd("D:/Research/HCC/Data/Y6_HCC/GSE102079")
# Giả sử GSE102079 là một data frame hoặc matrix, và gene_info đã được tạo như trên
GSE102079 = read.table("GSE102079_normalize.txt", header=T)
GSE102079_pheno = read.table("Cli_GSE102079.txt", header=T)
# Subset GSE102079 theo rownames (probe IDs)
GSE102079_subset <- GSE102079[rownames(GSE102079) %in% gene_info$Probe, ]
# 1. Đảo chiều (transpose) dữ liệu
GSE102079_transposed <- as.data.frame(t(GSE102079_subset))
# 2. Đổi tên cột từ probe thành gene (dựa trên gene_info)
# Đảm bảo các cột hiện tại (tức là probe) có mặt trong gene_info$Probe
matched_genes <- gene_info$Gene[match(colnames(GSE102079_transposed), gene_info$Probe)]
colnames(GSE102079_transposed) <- matched_genes
### SUBSET
merged_GSE102079 <- merge(GSE102079_transposed, GSE102079_pheno, by.x = "row.names", by.y = "ID")
View(merged_GSE102079)
GSE102079_pheno$type <- ifelse(test=GSE102079_pheno$Type == "Tumor", yes= 1, no= 0)
# Subset GSE102079 theo rownames (probe IDs)
GSE102079_subset <- GSE102079[rownames(GSE102079) %in% gene_info$Probe, ]
# 1. Đảo chiều (transpose) dữ liệu
GSE102079_transposed <- as.data.frame(t(GSE102079_subset))
# 2. Đổi tên cột từ probe thành gene (dựa trên gene_info)
# Đảm bảo các cột hiện tại (tức là probe) có mặt trong gene_info$Probe
matched_genes <- gene_info$Gene[match(colnames(GSE102079_transposed), gene_info$Probe)]
colnames(GSE102079_transposed) <- matched_genes
### SUBSET
merged_GSE102079 <- merge(GSE102079_transposed, GSE102079_pheno, by.x = "row.names", by.y = "ID")
merged_GSE102079$Type <- as.factor(merged_GSE102079$Type)
View(merged_GSE102079)
merged_GSE102079$type
table(merged_GSE102079$type)
setwd("D:/Research/HCC/Data/Y6_HCC/GSE102079")
i= "DTL"
vio <- as.data.frame(merged_GSE102079[,names(merged_GSE102079) %in% c("Type", i)])
colnames(vio) = c("Gene_expression", "Type")
p <- ggplot(vio, aes(x = Type, y = Gene_expression)) +
geom_violin(aes(fill = Type), trim = FALSE) +
geom_boxplot(position = position_dodge(0.3), width = 0.1, color = "black", outlier.size = 1) +
stat_compare_means(method = "wilcox.test", label.x = 0.75, label.y = 3) +
theme_classic() + labs(y = "Z-score expression level" , x = "Tissue type") + labs(fill = "Tissue type")
pdf(paste0("Violinplot_GSE102079_", i, ".pdf", sep = ""),
width = 6, # The width of the plot in inches
height = 6) # The height of the plot in inches
print(p)
dev.off()
i= "RRM2_1"
vio <- as.data.frame(merged_GSE102079[,names(merged_GSE102079) %in% c("Type", i)])
colnames(vio) = c("Gene_expression", "Type")
p <- ggplot(vio, aes(x = Type, y = Gene_expression)) +
geom_violin(aes(fill = Type), trim = FALSE) +
geom_boxplot(position = position_dodge(0.3), width = 0.1, color = "black", outlier.size = 1) +
stat_compare_means(method = "wilcox.test", label.x = 0.75, label.y = 3) +
theme_classic() + labs(y = "Z-score expression level" , x = "Tissue type") + labs(fill = "Tissue type")
pdf(paste0("Violinplot_GSE102079_", i, ".pdf", sep = ""),
width = 6, # The width of the plot in inches
height = 6) # The height of the plot in inches
print(p)
dev.off()
setwd("D:/Research/HCC/Data/Y6_HCC/GSE45436")
GSE45436 = read.table("GSE45436_normalize.txt", header=T)
GSE45436_pheno = read.table("Cli_GSE45436.txt", header=T)
GSE45436_pheno
GSE45436_pheno$type <- ifelse(test=GSE45436_pheno$Type == "Tumor", yes= 1, no= 0)
View(GSE45436_pheno)
GSE45436_subset <- GSE45436[rownames(GSE45436) %in% gene_info$Probe, ]
# 1. Đảo chiều (transpose) dữ liệu
GSE45436_transposed <- as.data.frame(t(GSE45436_subset))
# 2. Đổi tên cột từ probe thành gene (dựa trên gene_info)
# Đảm bảo các cột hiện tại (tức là probe) có mặt trong gene_info$Probe
matched_genes <- gene_info$Gene[match(colnames(GSE45436_transposed), gene_info$Probe)]
colnames(GSE45436_transposed) <- matched_genes
### SUBSET
merged_GSE45436 <- merge(GSE45436_transposed, GSE45436_pheno, by.x = "row.names", by.y = "ID")
merged_GSE45436$Type <- as.factor(merged_GSE45436$Type)
View(merged_GSE45436)
i= "DTL"
vio <- as.data.frame(merged_GSE45436[,names(merged_GSE45436) %in% c("Type", i)])
colnames(vio) = c("Gene_expression", "Type")
p <- ggplot(vio, aes(x = Type, y = Gene_expression)) +
geom_violin(aes(fill = Type), trim = FALSE) +
geom_boxplot(position = position_dodge(0.3), width = 0.1, color = "black", outlier.size = 1) +
stat_compare_means(method = "wilcox.test", label.x = 0.75, label.y = 3) +
theme_classic() + labs(y = "Z-score expression level" , x = "Tissue type") + labs(fill = "Tissue type")
pdf(paste0("Violinplot_GSE45436_", i, ".pdf", sep = ""),
width = 6, # The width of the plot in inches
height = 6) # The height of the plot in inches
print(p)
dev.off()
i= "RRM2_1"
vio <- as.data.frame(merged_GSE45436[,names(merged_GSE45436) %in% c("Type", i)])
colnames(vio) = c("Gene_expression", "Type")
p <- ggplot(vio, aes(x = Type, y = Gene_expression)) +
geom_violin(aes(fill = Type), trim = FALSE) +
geom_boxplot(position = position_dodge(0.3), width = 0.1, color = "black", outlier.size = 1) +
stat_compare_means(method = "wilcox.test", label.x = 0.75, label.y = 3) +
theme_classic() + labs(y = "Z-score expression level" , x = "Tissue type") + labs(fill = "Tissue type")
pdf(paste0("Violinplot_GSE45436_", i, ".pdf", sep = ""),
width = 6, # The width of the plot in inches
height = 6) # The height of the plot in inches
print(p)
dev.off()
View(vio)
setwd("D:/Research/HCC/Data/Y6_HCC/GSE121248")
GSE121248 = read.table("GSE121248_normalize.txt", header=T)
View(merged_GSE45436)
str(merged_GSE45436)
GSE121248 = read.table("GSE121248_normalize.txt", header=T)
GSE121248_pheno = read.table("Cli_GSE121248.txt", header=T)
View(GSE121248_pheno)
GSE121248_pheno$type <- ifelse(test=GSE121248_pheno$Type == "Tumor", yes= 1, no= 0)
table(GSE121248_pheno$type)
GSE121248_subset <- GSE121248[rownames(GSE121248) %in% gene_info$Probe, ]
# 1. Đảo chiều (transpose) dữ liệu
GSE121248_transposed <- as.data.frame(t(GSE121248_subset))
# 2. Đổi tên cột từ probe thành gene (dựa trên gene_info)
# Đảm bảo các cột hiện tại (tức là probe) có mặt trong gene_info$Probe
matched_genes <- gene_info$Gene[match(colnames(GSE121248_transposed), gene_info$Probe)]
colnames(GSE121248_transposed) <- matched_genes
### SUBSET
merged_GSE121248 <- merge(GSE121248_transposed, GSE121248_pheno, by.x = "row.names", by.y = "ID")
merged_GSE121248$Type <- as.factor(merged_GSE121248$Type)
View(merged_GSE121248)
i= "DTL"
vio <- as.data.frame(merged_GSE121248[,names(merged_GSE121248) %in% c("Type", i)])
colnames(vio) = c("Gene_expression", "Type")
p <- ggplot(vio, aes(x = Type, y = Gene_expression)) +
geom_violin(aes(fill = Type), trim = FALSE) +
geom_boxplot(position = position_dodge(0.3), width = 0.1, color = "black", outlier.size = 1) +
stat_compare_means(method = "wilcox.test", label.x = 0.75, label.y = 3) +
theme_classic() + labs(y = "Z-score expression level" , x = "Tissue type") + labs(fill = "Tissue type")
pdf(paste0("Violinplot_GSE121248_", i, ".pdf", sep = ""),
width = 6, # The width of the plot in inches
height = 6) # The height of the plot in inches
print(p)
dev.off()
i= "RRM2_1"
vio <- as.data.frame(merged_GSE121248[,names(merged_GSE121248) %in% c("Type", i)])
colnames(vio) = c("Gene_expression", "Type")
p <- ggplot(vio, aes(x = Type, y = Gene_expression)) +
geom_violin(aes(fill = Type), trim = FALSE) +
geom_boxplot(position = position_dodge(0.3), width = 0.1, color = "black", outlier.size = 1) +
stat_compare_means(method = "wilcox.test", label.x = 0.75, label.y = 3) +
theme_classic() + labs(y = "Z-score expression level" , x = "Tissue type") + labs(fill = "Tissue type")
pdf(paste0("Violinplot_GSE121248_", i, ".pdf", sep = ""),
width = 6, # The width of the plot in inches
height = 6) # The height of the plot in inches
print(p)
dev.off()
View(vio)
View(merged_GSE45436)
View(merged_GSE102079)
View(merged_GSE45436)
View(merged_GSE14520)
write.table(merged_GSE14520, file="GSE14520_candidate.txt", quote=F, row.names=T,sep = "\t")
write.table(merged_GSE14520, file="GSE14520_candidate.txt", quote=F, row.names=T,sep = "\t")
setwd("D:/Research/HCC/Data/Y6_HCC/GSE14520")
write.table(merged_GSE14520, file="GSE14520_candidate.txt", quote=F, row.names=T,sep = "\t")
setwd("D:/Research/HCC/Data/Y6_HCC/GSE102079")
write.table(merged_GSE102079, file="GSE102079_candidate.txt", quote=F, row.names=F,sep = "\t")
setwd("D:/Research/HCC/Data/Y6_HCC/GSE45436")
write.table(merged_GSE45436, file="GSE45436_candidate.txt", quote=F, row.names=F,sep = "\t")
setwd("D:/Research/HCC/Data/Y6_HCC/GSE121248")
write.table(merged_GSE121248, file="GSE121248_candidate.txt", quote=F, row.names=F,sep = "\t")
setwd("D:/Research/HCC/Data/Y6_HCC/AUC")
dt1 <- read.table("GSE14520_candidate.txt", sep="\t",header = T)
dt2 <- read.table("GSE102079_candidate.txt", sep="\t",header = T)
dt3 <- read.table("GSE45436_candidate.txt", sep="\t",header = T)
dt4 <- read.table("GSE121248_candidate.txt", sep="\t",header = T)
dt5 <- read.table("GSE49515_candidate.txt", sep="\t",header = T)
dt6 <- read.table("GSE58208_candidate.txt", sep="\t",header = T)
GSE14520
GSE102079
GSE45436
GSE121248
GSE49515
View(dt1)
library(FUSIKA)
data_list <- list(dt1, dt2, dt3, dt4, dt5, dt6)
plot_roc_fusika(
data_list = data_list,
met_col = "type",         # Biến ground truth
pred_cols = "DTL",        # Gene DTL là điểm số dự đoán
labels = c("GSE14520", "GSE102079", "GSE45436",
"GSE121248", "GSE49515", "GSE58208"),
colors = c("green4", "darkorange", "purple",
"red", "blue", "magenta"),
title = "ROC for DTL across datasets"
)
devtools::document()
setwd("D:/Work/FUSIKA")
devtools::document()
devtools::install(force = TRUE)
library(FUSIKA)
setwd("D:/Research/HCC/Data/Y6_HCC/AUC")
library(FUSIKA)
# Đặt thư mục
setwd("D:/Research/HCC/Data/Y6_HCC/AUC")
# Đọc các file
dt1 <- read.table("GSE14520_candidate.txt", sep="\t", header = TRUE)
dt2 <- read.table("GSE102079_candidate.txt", sep="\t", header = TRUE)
dt3 <- read.table("GSE45436_candidate.txt", sep="\t", header = TRUE)
dt4 <- read.table("GSE121248_candidate.txt", sep="\t", header = TRUE)
dt5 <- read.table("GSE49515_candidate.txt", sep="\t", header = TRUE)
dt6 <- read.table("GSE58208_candidate.txt", sep="\t", header = TRUE)
# Gộp vào list
data_list <- list(dt1, dt2, dt3, dt4, dt5, dt6)
plot_roc_fusika(
data_list = data_list,
met_col = "type",         # Biến ground truth
pred_cols = "DTL",        # Gene DTL là điểm số dự đoán
labels = c("GSE14520", "GSE102079", "GSE45436",
"GSE121248", "GSE49515", "GSE58208"),
colors = c("green4", "darkorange", "purple",
"red", "blue", "magenta"),
title = "ROC for DTL across datasets"
)
plot_roc_fusika(
data_list = data_list,
met_col = "type",         # Biến ground truth
pred_cols = "DTL",        # Gene DTL là điểm số dự đoán
labels = c("GSE14520", "GSE102079", "GSE45436",
"GSE121248", "GSE49515", "GSE58208"),
colors = c("green4", "darkorange", "purple",
"red", "blue", "magenta"))
setwd("D:/Research/HCC/Data/Y6_HCC/AUC")
library(FUSIKA)
# Đặt thư mục
setwd("D:/Research/HCC/Data/Y6_HCC/AUC")
# Đọc các file
dt1 <- read.table("GSE14520_candidate.txt", sep="\t", header = TRUE)
dt2 <- read.table("GSE102079_candidate.txt", sep="\t", header = TRUE)
dt3 <- read.table("GSE45436_candidate.txt", sep="\t", header = TRUE)
dt4 <- read.table("GSE121248_candidate.txt", sep="\t", header = TRUE)
dt5 <- read.table("GSE49515_candidate.txt", sep="\t", header = TRUE)
dt6 <- read.table("GSE58208_candidate.txt", sep="\t", header = TRUE)
# Gộp vào list
data_list <- list(dt1, dt2, dt3, dt4, dt5, dt6)
plot_roc_fusika(
data_list = data_list,
met_col = "type",         # Biến ground truth
pred_cols = "DTL",        # Gene DTL là điểm số dự đoán
labels = c("GSE14520", "GSE102079", "GSE45436",
"GSE121248", "GSE49515", "GSE58208"),
colors = c("green4", "darkorange", "purple",
"red", "blue", "magenta"),
title = "ROC for DTL across datasets"
)
View(dt5)
View(dt6)
View(dt5)
View(dt6)
View(dt5)
View(dt4)
View(dt1)
setwd("D:/Research/HCC/Data/Y6_HCC/AUC")
library(FUSIKA)
# Đặt thư mục
setwd("D:/Research/HCC/Data/Y6_HCC/AUC")
# Đọc các file
dt1 <- read.table("GSE14520_candidate.txt", sep="\t", header = TRUE)
dt2 <- read.table("GSE102079_candidate.txt", sep="\t", header = TRUE)
dt3 <- read.table("GSE45436_candidate.txt", sep="\t", header = TRUE)
dt4 <- read.table("GSE121248_candidate.txt", sep="\t", header = TRUE)
dt5 <- read.table("GSE49515_candidate.txt", sep="\t", header = TRUE)
dt6 <- read.table("GSE58208_candidate.txt", sep="\t", header = TRUE)
# Gộp vào list
data_list <- list(dt1, dt2, dt3, dt4, dt5, dt6)
plot_roc_fusika(
data_list = data_list,
met_col = "type",         # Biến ground truth
pred_cols = "DTL",        # Gene DTL là điểm số dự đoán
labels = c("GSE14520", "GSE102079", "GSE45436",
"GSE121248", "GSE49515", "GSE58208"),
colors = c("green4", "darkorange", "purple",
"red", "blue", "magenta"),
title = "ROC for DTL across datasets"
)
plot_roc_fusika(
data_list = data_list,
met_col = "type",         # Biến ground truth
pred_cols = "DTL",        # Gene DTL là điểm số dự đoán
labels = c("GSE14520", "GSE102079", "GSE45436",
"GSE121248", "GSE49515", "GSE58208"),
colors = c("green4", "darkorange", "purple",
"red", "blue", "magenta"),
title = "ROC for DTL gene across datasets"
)
plot_roc_fusika(
data_list = data_list,
met_col = "type",         # Biến ground truth
pred_cols = "RRM2_1",        # Gene DTL là điểm số dự đoán
labels = c("GSE14520", "GSE102079", "GSE45436",
"GSE121248", "GSE49515", "GSE58208"),
colors = c("green4", "darkorange", "purple",
"red", "blue", "magenta"),
title = "ROC for RRM2 gene across datasets"
)
View(dt1)
table(dt1$type)
table(dt2$type)
table(dt3$type)
table(dt4$type)
table(dt5$type)
